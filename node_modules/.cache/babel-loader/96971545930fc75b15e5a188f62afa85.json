{"ast":null,"code":"var _jsxFileName = \"/Users/toogreen/git-hosted/greeting/src/components/Generator.js\";\nimport React, { Component } from \"react\";\nimport Ad from \"./Ad\";\nimport $ from \"jquery\";\nimport domtoimage from \"dom-to-image\";\nimport MemeList from \"./MemeList\";\nimport { isSafari, isMobile, isIPad13, isIPhone13 } from \"react-device-detect\";\n\nclass Generator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomTet: \"\",\n      randomImg: \"https://thumbs.dreamstime.com/z/merry-christmas-happy-holidays-greeting-card-frame-new-year-gifts-presents-fir-tree-ornaments-white-background-top-view-133666343.jpg\",\n      allMemeImgs: [],\n      count: 0,\n      favImage: \"\",\n      foo: \"\",\n      lang: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCopy = this.handleCopy.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(response => {\n      const {\n        memes\n      } = response.data;\n      this.setState({\n        allMemeImgs: memes\n      });\n      console.log(memes[0]);\n    });\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    name === \"favImage\" ? this.setState({\n      randomImg: event.target.value\n    }) : this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault(); //get a a random number\n\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length); // get the meme from that index\n\n    const randMemeImg = this.state.allMemeImgs[randNum].url; // set \"randomImg\" to the \".url\"  of the random item I grabbed\n\n    this.setState({\n      randomImg: randMemeImg\n    });\n  }\n\n  handleCopy(event) {\n    event.preventDefault(); // Copy the content of the \"meme\" DIV and make it an image\n\n    const render = node => domtoimage.toPng(node).then(dataUrl => {\n      console.log(performance.now() - pf);\n      const img = new Image();\n      img.src = dataUrl;\n      $('.imgZone').append(this.state.count > 0 && \"<hr />\").append(\"<h2>Your generated image # \" + this.state.count + \"</h2>\");\n      $('.imgZone').append(img);\n      $('.hidden').show();\n    }).catch(error => console.error('oops, something went wrong!', error)),\n          foo = document.getElementById('meme');\n\n    var pf = performance.now();\n    render(foo); // Increment the value of count\n\n    this.setState(prevState => {\n      return {\n        count: prevState.count + 1\n      };\n    }); // scroll down to new image\n\n    window.scrollTo(0, document.body.scrollHeight);\n  }\n\n  closeModal() {\n    $('.hidden').hide();\n  }\n\n  toggleLang() {\n    this.setState(prevState => ({\n      lang: !prevState.lang\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"langButton\",\n      onClick: () => {\n        this.toggleLang();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 1\n      }\n    }, this.state.lang ? \"EN\" : \"FR\"), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"meme-form\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"textarea\",\n      name: \"topText\",\n      value: this.state.topText,\n      placeholder: this.state.lang ? \"Texte principal\" : \"Main Text\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"bottomText\",\n      value: this.state.bottomText,\n      placeholder: this.state.lang ? \"Signature (De:)\" : \"Signature (From:)\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"meme\",\n      className: \"meme\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.randomImg,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 6\n      }\n    }, this.state.topText), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 6\n      }\n    }, this.state.bottomText)), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"buttonCopy\",\n      onClick: this.handleCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 5\n      }\n    }, \"Generate an Image to copy it elsewhere\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hidden\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, this.state.count > 0 && (isSafari || isIPad13 || isIPhone13) && \"If it didn't work on the last click, try clicking the above button one more time (Apple Bug)\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"imgContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"close\",\n      onClick: this.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }\n    }, \"X\"), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }\n    }, \"Copy and paste the image\", this.state.count > 1 && \"s\", \" from below\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"imgZone\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Ad, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nexport default Generator;","map":{"version":3,"sources":["/Users/toogreen/git-hosted/greeting/src/components/Generator.js"],"names":["React","Component","Ad","$","domtoimage","MemeList","isSafari","isMobile","isIPad13","isIPhone13","Generator","constructor","state","topText","bottomTet","randomImg","allMemeImgs","count","favImage","foo","lang","handleChange","bind","handleSubmit","handleCopy","componentDidMount","setState","loading","fetch","then","response","json","memes","data","console","log","event","name","value","target","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","render","node","toPng","dataUrl","performance","now","pf","img","Image","src","append","show","catch","error","document","getElementById","prevState","window","scrollTo","body","scrollHeight","closeModal","hide","toggleLang","bottomText"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\nimport Ad from \"./Ad\"\nimport $ from \"jquery\"\nimport domtoimage from \"dom-to-image\"\nimport MemeList from \"./MemeList\"\nimport {isSafari, isMobile, isIPad13, isIPhone13} from \"react-device-detect\"\n\nclass Generator extends Component {\n\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\ttopText: \"\",\n\t\t\tbottomTet: \"\",\n\t\t\trandomImg: \"https://thumbs.dreamstime.com/z/merry-christmas-happy-holidays-greeting-card-frame-new-year-gifts-presents-fir-tree-ornaments-white-background-top-view-133666343.jpg\",\n\t\t\tallMemeImgs: [],\n\t\t\tcount: 0,\n\t\t\tfavImage: \"\",\n\t\t\tfoo: \"\",\n\t\t\tlang: false\n\t\t}\n\t\tthis.handleChange = this.handleChange.bind(this)\n\t\tthis.handleSubmit = this.handleSubmit.bind(this)\n\t\tthis.handleCopy = this.handleCopy.bind(this)\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setState({loading: true})\n\t\tfetch(\"https://api.imgflip.com/get_memes\")\n\t\t\t.then(response => response.json())\n\t\t\t.then(response => {\n\t\t\t\tconst {memes} = response.data\n\n\t\t\t\tthis.setState({ allMemeImgs: memes })\n\t\t\t\tconsole.log(memes[0])\n\t\t\t})\n\t}\n\n\thandleChange(event){\n\t\tconst {name, value} = event.target\n\t\tname === \"favImage\" ? this.setState({ randomImg: event.target.value }) : this.setState({[name]: value})\n\n\t}\n\n\thandleSubmit(event){\n\n\t\tevent.preventDefault()\n\n\t\t//get a a random number\n\t\tconst randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n\n\t\t// get the meme from that index\n\t\tconst randMemeImg = this.state.allMemeImgs[randNum].url\n\n\t\t// set \"randomImg\" to the \".url\"  of the random item I grabbed\n\t\tthis.setState({ randomImg: randMemeImg})\n\n\t}\n\n\thandleCopy(event){\n\n\t\tevent.preventDefault()\n\n\t\t// Copy the content of the \"meme\" DIV and make it an image\n\t\tconst render = node =>\n\t\t  domtoimage.toPng(node)\n\t\t  .then(dataUrl => {\n\t\t    console.log(performance.now() - pf)\n\t\t    const img = new Image();\n\t\t    img.src = dataUrl;\n\n\t\t    $('.imgZone').append(this.state.count > 0 && \"<hr />\").append(\"<h2>Your generated image # \" + this.state.count+ \"</h2>\")\n\t\t    $('.imgZone').append(img)\n\t\t    $('.hidden').show();\n\n\t\t  })\n\t\t  .catch(error =>\n\t\t    console.error('oops, something went wrong!', error)\n\t\t  ),\n\n\t\tfoo = document.getElementById('meme');\n\n\t\tvar pf = performance.now();\n\t\trender(foo);\n\n\t\t// Increment the value of count\n\t\tthis.setState(prevState => {\n\t\t\treturn {\n\t\t\t\tcount: prevState.count + 1\n\t\t\t}\n\t\t})\n\n\t\t// scroll down to new image\n\t\twindow.scrollTo(0,document.body.scrollHeight);\n \n\t}\n\n\tcloseModal() {\n\t\t$('.hidden').hide();\n\t}\n\n\ttoggleLang() {\n        this.setState(prevState => ({ lang: !prevState.lang }));\n    }\n\n\n\trender() {\n\n\t\treturn(\n\t\t\t<main>\n\n<button className=\"langButton\" onClick={() => {this.toggleLang(); }} >{this.state.lang ? \"EN\" : \"FR\"}</button>\n\n\t\t\t\t<form className=\"meme-form\" onSubmit={this.handleSubmit}>\n\n\t\t\t\t{/* <button>Random image</button> */}\n\n\t\t\t\t<input \n\t\t\t\t\ttype=\"textarea\"\n\t\t\t\t\tname=\"topText\"\n\t\t\t\t\tvalue={this.state.topText}\n\t\t\t\t\tplaceholder={this.state.lang ? \"Texte principal\" : \"Main Text\"} \n\t\t\t\t\tonChange={this.handleChange} \n\t\t\t\t/>\n\n\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t<input \n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"bottomText\"\n\t\t\t\t\tvalue={this.state.bottomText}\n\t\t\t\t\tplaceholder={this.state.lang ? \"Signature (De:)\" : \"Signature (From:)\"} \n\t\t\t\t\tonChange={this.handleChange} \n\t\t\t\t/>\n\n\t\t\t\t<br />\n\t\t\t\t\t\n\t\t\t\t</form>\n\n\t\t\t\t{/* <select \n\t\t\t\t\tname=\"favImage\"\n\t\t\t\t\tonChange={this.handleChange} \n\t\t\t\t>\n\t\t\t\t\t<option value=\"\">-- SELECT A MEME --</option>\n\t\t\t\t\t<MemeList \n\t\t\t\t\t\tdata={this.state}\n\t\t\t\t\t/>\n\t\t\t\t</select> */}\n\n\t\t\t\t<div id=\"meme\" className=\"meme\"> \n\t\t\t\t\t<img src={this.state.randomImg} alt=\"\" />\n\t\t\t\t\t<h2 className=\"top\">{this.state.topText}</h2>\n\t\t\t\t\t<h2 className=\"bottom\">{this.state.bottomText}</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<button id=\"buttonCopy\" onClick={this.handleCopy}>Generate an Image to copy it elsewhere</button>\n\n\n\t\t\t\t<div className=\"hidden\">\n\n\t\t\t\t\t\t{/* Added this for warning users on iPad or iPhone or Safari that the image may not copy on first try - this is a bug i'm trying to figure out. */}\n\t\t\t\t\t\t<p>{(this.state.count > 0 && (isSafari || isIPad13 || isIPhone13)) && \"If it didn't work on the last click, try clicking the above button one more time (Apple Bug)\"}</p>\n\t\t\t\t\t\n\t\t\t\t\t<br />\n\t\t\t\t\t<div className=\"imgContainer\">\n\t\t\t\t\t\t<div className=\"close\" onClick={this.closeModal}>X</div>\n\t\t\t\t\t\t<h1>Copy and paste the image{this.state.count > 1 && \"s\"} from below</h1>\n\t\t\t\t\t\t<span className=\"imgZone\"></span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t\n\n\t\t\t\t<br />\n\t\t\t\t<br />\n\n\t\t\t\t<Ad />\n\n\t\t\t</main>\n\t\t)\n\t}\n\n}\n\nexport default Generator"]},"metadata":{},"sourceType":"module"}